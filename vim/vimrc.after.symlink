" .vimrc                                                        -*- vimrc -*-
" Double-quote represents a comment character in .vimrc files
"
" crh .vimrc file
"
" credits
" + steve losh
" + joe blaylock
"
" TODO:
"

" general
" view
" edit
" syntax
" search
" code
" map
" abbreviation
iab teh the

" Pass the word under the pointer to uchicago's ARTFL Roget's Thesaurus (1911)
map _t "zyawnmz:read !lynx -dump -hiddenlinks=ignore -nolist -nolog -nopause -noredir -nostatus http://machaut.uchicago.edu/cgi-bin/ROGET.sh?word=z<CR>`z12dd

""" start here

let $MYVIMRC="$HOME/.vimrc.after"

" automatically reload vimrc when it's saved
au BufWritePost $MYVIMRC so $MYVIMRC

""" settings

""" Visual
" easier jump, i.e.,  5jj
set relativenumber
set showcmd
" show the cursor position all the time
set ruler
set colorcolumn=85
" show invisible characters
set listchars=tab:▸\ ,eol:¬,trail:.,extends:>,precedes:<
set list

" don't disturb me!
set noerrorbells
set visualbell

set scrolloff=5               " keep at least 5 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right

autocmd InsertLeave * set nocursorline
autocmd InsertEnter * set cursorline
highlight CursorLine ctermbg=8 cterm=NONE

""" color is fun
colorscheme ir_black

" enviroment specific settings
if has("gui_running")

  set background=dark
  set guioptions-=T
  set guioptions+=m

  if has("gui_gtk2")
    " you have to install Mensch font
    " TODO check if, Mensch is installed. Otherwise use other font.
    set guifont=Mensch\ 8
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  elseif has("gui_macvim")
    set guifont=Menlo:h12
    set fuoptions=maxvert,maxhorz
    " TODO this is broken in Mac OS X Lion
    "  au GUIEnter * set fullscreen
  endif
else
  " shell
  " use 256 color in terminal
  set t_Co=256
  colorscheme ir_black
  " set guifont=Liberation\ Mono\ 9
endif

" TODO why do we need ai?
set ai

""" SEARCH
set incsearch
set hlsearch
set smartcase
set ignorecase

" TODO RND
set showmatch

" gdefault applies substitutions globally on lines.
" For example, instead of :%s/foo/bar/g you just type :%s/foo/bar/.
set gdefault

" clear highlight, after I found what I'm looking for
nnoremap <leader><space> :noh<cr>

" map C-c for copy to system's clipboard
vmap <C-c> "+y"
" vmap <C-v> "*p"

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

""" SYNTAX
set omnifunc=syntaxcomplete#Complete " TODO RND

" org mode
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org
au BufEnter *.org call org#SetOrgFileType()

" TODO jquery ???
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery


""" HTML """
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

""" JAVASCRIPT """
autocmd FileType javascript set textwidth=79

""" CSS """
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

""" PYTHON """
autocmd FileType python set omnifunc=pythoncomplete#Complete

""" MAPPING """

" use comma as <Leader> key instead of backslash
let mapleader=","

" press ,W to clean up whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,/ = clear search
noremap <silent><Leader>/ :nohls<CR>

" map CTRL + S for saving
nnoremap <silent> <C-S> :if expand("%") == ""<CR>browse confirm w<CR>else<CR>confirm w<CR>endif<CR>;

" open end edit .vimrc
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" spell checker shortcut
map <F6> <Esc>:setlocal spell spelllang=en_us<CR>
map <F7> <Esc>:setlocal spell spelllang=de<CR>
map <F8> <Esc>:setlocal nospell<CR>

" map ,ft to "fold tag"
nnoremap <leader>ft Vatzf

" TODO USEMORE
" check html
map ,h5 :!html5check.py %<CR>

" TODO how can I use this?
let g:jsbeautify = {'indent_size': 2, 'indent_char': ' '}
let g:htmlbeautify = {'indent_size': 2, 'indent_char': ' ', 'max_char': 78, 'brace_style': 'expand', 'unformatted': ['a', 'sub', 'sup', 'b', 'i', 'u']}
let g:cssbeautify = {'indent_size': 2, 'indent_char': ' '}

map <c-f> :call JsBeautify()<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" Markdown preview
" TODO USEMORE
imap <leader>p <ESC>:w!<CR>:!markdown % < %.html && open %.html<CR><CR>a
map  <leader>p <ESC>:w!<CR>:!markdown % < %.html && open %.html<CR><CR>a

""" OTHERS """
set history=100     " keep 100 lines of command line history

" TODO USEMORE
let g:slime_target = "tmux"
map <C-c><C-c> :SlimuxREPLSendLine<CR>
vmap <C-c><C-c> :SlimuxREPLSendSelection<CR>

" TODO what this line does?
set complete=.,b,u,]

" linter
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=1
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set autochdir

" TODO USEMORE
" move between brackets
nnoremap <tab> %
vnoremap <tab> %

" Long line handling
set wrap
set textwidth=79
set formatoptions=qrn1

" save file(s?) on lost focus
au FocusLost * :wa

nnoremap <leader>a :Ack

nnoremap <leader>q gqip

" ,v = SELECT ALL
nnoremap <leader>v V`]`

" ,w open vertical
nnoremap <leader>w <C-w>v<C-w>l

" check html5 on save
" :autocmd BufWritePost *.html !html5check.py <afile>

nmap <C-7> \c<space><CR>
" imap <C-7> \c<space><CR>

setlocal shiftwidth=2
setlocal tabstop=2

let g:languagetool_jar='/home/chh/src/LanguageTool/LanguageTool.jar'
set clipboard=unnamedplus
